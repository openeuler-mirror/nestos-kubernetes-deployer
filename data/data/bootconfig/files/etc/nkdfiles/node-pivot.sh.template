#!/bin/bash

# Template variables
hook_files_path="{{.HookFilesPath}}"
runtime="{{.Runtime}}"
image_registry="{{.ImageRegistry}}"
pause_image="{{.PauseImage}}"
release_image_url="{{.ReleaseImageURl}}"
certs_url="{{.CertsUrl}}"

# Function to manage services
manage_service() {
    local service_name="$1"
    if systemctl is-active --quiet "$service_name"; then
        echo "$service_name is already running"
    else
        echo "$service_name is not running, starting..."
        if systemctl start "$service_name" && systemctl enable "$service_name"; then
            echo "$service_name starting success."
        else
            echo "Unable to start or enable $service_name."
            exit 1
        fi
    fi
}

# Function to check and start service
check_and_start_service() {
    local service_name="$1"
    if systemctl list-unit-files | grep -q "$service_name.service"; then
        manage_service "$service_name"
    else
        echo "$service_name service does not exist, skipping..."
    fi
}

# Function to execute hook files
execute_hookfiles() {
    local directory="$1"
    if [ ! -d "$directory" ]; then
        echo "Directory not found: $directory"
        return 
    fi

    local shell_files=("$directory"/*)
    if [ ${#shell_files[@]} -eq 0 ]; then
        echo "No files found in directory: $directory"
        return
    fi

    for file in "${shell_files[@]}"; do
        if [ -f "$file" ]; then
            echo "Executing script: $file"
            . "$file"
        fi
    done
}

# Function to configure CRI-O runtime
configure_crio_runtime() {
    local config_file="/etc/crio/crio.conf"
    if [ -f "$config_file" ]; then
        if grep -q "\[crio\.image\]" "$config_file"; then
            sed -i 's|^pause_image = .*|pause_image = "'"$image_registry/$pause_image"'"|' "$config_file" || true
        else
            echo -e "[crio.image]\npause_image = \"$image_registry/$pause_image\"" >> "$config_file"
        fi
        systemctl restart crio
    fi
}

# Function to perform OSTree rebase
perform_rebase() {
    local url="$1"
    if [ -z "$url" ]; then
        echo "release_image_url is empty, skipping rpm-ostree rebase."
    else
        if rpm-ostree rebase --experimental "ostree-unverified-image:docker://$url" --bypass-driver; then
            echo "Rebase operation completed successfully. Rebooting the system..."
            systemctl reboot
        else
            echo "Rebase operation failed. System will not be rebooted."
        fi
    fi
}

# Function to fetch and save certificates
fetch_and_save_certificates() {
    local certs_dir="/etc/kubernetes/pki/etcd"

    mkdir -p "$certs_dir"
    local response=$(curl -s $certs_url)
    if [ -z "$response" ]; then
        echo "Error: Failed to fetch JSON data."
        exit 1
    fi

    local path content
    while IFS= read -r line; do
        read -r path content <<< "$line"
        echo "$content" > "$certs_dir/$path"
    done < <(echo "$response" | jq -r '.[] | "\(.Path) \(.Content)"')
}

install_kubernetes_packages() {
    sudo yum install -y kubernetes-client kubernetes-kubelet kubernetes-kubeadm conntrack cri-tools
    {{if .IsDocker -}}
    sudo yum install -y docker
    {{end -}}
    
    {{if .IsIsulad -}}
    sudo yum install -y isulad
    {{end -}}

    {{if .IsCrio -}}
    sudo yum install -y crio
    {{end -}}
}

check_installation_status() {
    if rpm -qa | grep -E 'kubernetes-client|kubernetes-master|kubernetes-node' >/dev/null 2>&1; then
        echo "Kubernetes packages installed successfully."
    else
        echo "Error: Kubernetes packages installation failed." >&2
    fi
}

if grep -q 'openEuler' /etc/os-release; then
    install_kubernetes_packages
    echo "Checking installation status..."
    check_installation_status
    {{if .IsControlPlane -}}
    fetch_and_save_certificates
    {{end -}}
fi

# Execute hook files
execute_hookfiles "$hook_files_path"

# Start necessary services
check_and_start_service "$runtime"
check_and_start_service "housekeeper-daemon"

# Configure CRI-O runtime
{{if .IsCrio -}}
configure_crio_runtime
{{end -}}

# Perform OSTree rebase for nestos
if grep -q 'nestos' /etc/os-release; then
# Disable SELinux
echo "Disabling SELinux..."
sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config
setenforce 0
perform_rebase "$release_image_url"
fi